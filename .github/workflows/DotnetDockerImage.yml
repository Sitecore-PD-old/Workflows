# This is a reusable workflow for building a dockerimage based on dotnet

name: Build dotnet Docker image

on:
  workflow_call:
    inputs:
      coverage_threshold:
        required: false
        type: number
        default: 80
      coverage_filter:
        required: false
        type: string
        default: "+:Sitecore.*;-:*.UnitTests;-:*.IntegrationTests"
    secrets:
      container_registry:
        required: true
      container_registry_user:
        required: true
      container_registry_pwd:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  CalculateVersion:
    runs-on: simple-version
    steps:
      - uses: actions/checkout@v2
        with:
          #simpleversion needs the history to calculate teh version
          fetch-depth: 0
      - name: Calculate Version
        run: calculate-version
      - name: Store Version
        id: setversion
        run: |
          versioninfo=$(cat version.json)
          version=$(echo $versioninfo | jq '.formats.Semver2' | sed 's/"//g')
          echo "::set-output name=version::$version"
    outputs:
      version: ${{ steps.setversion.outputs.version }}
  Unittest:
    runs-on: dotnet-5.0
    steps:
      - uses: actions/checkout@v2
      - name: Run unit tests
        env:
          # test project coverage is not the default 80%
          COVERAGE_THRESHOLD: ${{ inputs.coverage_threshold }}
          COVERAGE_FILTER: ${{ inputs.coverage_filter }}
        run: run-unittests
      - name: Convert report to JUnit format
        run: find . -name '*.trx' -exec trx2junit {} \;
      - name: Upload Unit Test reports
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: testresults/
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "Unit Test Results"
          comment_title: "Unit Test Results"
          files: ./testresults/_*.xml        
  build-and-publish:
    runs-on: docker-cli
    needs: 
      - Unittest
      - CalculateVersion
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          #!/bin/bash
          set -e
          export DOCKER_REGISTRY=${{ secrets.container_registry }}/dotnetsampleapp-service1
          export TAG="${{needs.CalculateVersion.outputs.version}}"
          docker-compose -f docker-compose.yml build
          echo "${{ secrets.container_registry_pwd }}" | docker login ${{ secrets.container_registry }} --username "${{ secrets.container_registry_user }}" --password-stdin
          docker-compose -f docker-compose.yml push
      - name: package Helm artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Helm Artifacts
          path: deploy/
  build-helm:
    runs-on: helm
    needs: 
      - build-and-publish
      - CalculateVersion
    steps:
      - name: Download Helm Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Helm Artifacts
          path: deploy/
      - name: build helm and publish
        run: |
          #!/bin/bash
          set -e 
          # Setup variables and call helm chart publish task.
          export PACKAGES="dotnetsampleapp-service1"
          export APPLICATION="helm/dotnetsampleapp-service1"
          export REGISTRY=${{ secrets.container_registry }}
          export REGISTRY_USER=${{ secrets.container_registry_user }}
          export REGISTRY_PASSWORD=${{ secrets.container_registry_pwd }}
          export CHART_VERSION_NBR="${{needs.CalculateVersion.outputs.version}}"
          publish-charts
  integrationtests:
    runs-on: docker-cli
    needs: 
      - CalculateVersion
      - build-and-publish
    steps:
      - uses: actions/checkout@v2
      - name: Run Integration tests
        run: |
          #!/bin/bash
          set -e
          echo GITHUB_RUN_ID=${GITHUB_RUN_ID}
          echo GITHUB_RUN_NUMBER=${GITHUB_RUN_NUMBER}
          echo GITHUB_JOB=${GITHUB_JOB}
          #validate-daemon
          docker version
          export COMPOSE_PROJECT_NAME=DotnetSampleApp
          export DOCKER_REGISTRY=${{ secrets.container_registry }}/dotnetsampleapp-service1
          export TAG="${{needs.CalculateVersion.outputs.version}}"
          echo "${{ secrets.container_registry_pwd }}" | docker login ${{ secrets.container_registry }} --username "${{ secrets.container_registry_user }}" --password-stdin
          docker-compose -f docker-compose.test.yml run sut
      - name: Upload Integration Test reports
        uses: actions/upload-artifact@v2
        with:
          name: Raw Integration Test Results
          path: test/**/TestResults/
  ParseIntegrationtests:
    runs-on: dotnet-5.0
    needs: 
      - integrationtests
    steps:
      - name: Download Helm Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Raw Integration Test Results
          path: test/
      - name: Convert report to JUnit format
        run: find . -name '*.trx' -exec trx2junit {} \;
      - name: Publish Integation Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "Integration Test Results"
          comment_title: "Integration Test Results"
          files: test/**/TestResults/_*.xml        
      - name: Upload Integration Test reports
        uses: actions/upload-artifact@v2
        with:
          name: Integration Test Results
          path: test/